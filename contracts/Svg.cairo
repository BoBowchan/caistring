%lang starknet

from starkware.cairo.common.cairo_builtins import HashBuiltin
from starkware.cairo.common.math import unsigned_div_rem
from starkware.cairo.common.alloc import alloc

from contracts.Str import (Str, literal_from_number, str_from_literal, str_concat_array)

#
# v0.1: support flat structure:
# <svg ...>
# [a bunch of <rect/> or <path/> that do not contain nested tags]
# </svg>
#

#
# short-term goal:
# build Svg library to recreate Wheelcards on StarkNet,
# where each attribute is a Svg instance stored in contract,
# and rollie svg is generated by combination of attributes in contract
#

#
# v0.2: support nested structure
#


#
# fixed-point number with 2 decimal points
#
struct NumFp2:
    member val : felt
end

struct TupleNumFp2:
    member x : NumFp2
    member y : NumFp2
end

struct SvgRect:
    member x : NumFp2
    member y : NumFp2
    member w : NumFp2
    member h : NumFp2
    member arr_attributes_len : felt
    member arr_attributes : SvgAttribute*
end

#
# TODO: gives resolution into constructing path.d
#
struct SvgPath:
    member d : Str
    member arr_attributes_len : felt
    member arr_attributes : SvgAttribute*
end

#
# <polygon/>
# - fill: the decimal integer value of the color e.g. #FFFFFF = 255*(255^2) + 255*(255) + 255
# - arr_points: array of TupleNumFp2
#
struct SvgPolygon:
    member arr_points_len : felt
    member arr_points : TupleNumFp2*
    member arr_attributes_len : felt
    member arr_attributes : SvgAttribute*
end

struct SvgCircle:
    member cx : NumFp2
    member cy : NumFp2
    member r : NumFp2
    member arr_attributes_len : felt
    member arr_attributes : SvgAttribute*
end

struct SvgAttribute:
    member attribute : felt
    member value : felt
end

# type: rect, path, polygon, circle
# value: the pointer to the instance of struct cast to felt
struct SvgObj:
    member typ : felt
    member val : felt
end

###########################

func numfp2_from_felt {} (x : felt) -> (res : NumFp2):
    return ( NumFp2(val = x * 100) )
end

###########################

func return_svg_header {range_check_ptr} (
        w : felt,
        h : felt
    ) -> (str : Str):
    alloc_locals

    # Format:
    # <svg width="{w}" height="{h}" xmlns="http://www.w3.org/2000/svg">

    # literal/str_from_number only supports integer for now
    let (w_literal : felt) = literal_from_number (w)
    let (h_literal : felt) = literal_from_number (h)

    let (arr) = alloc()
    assert arr[0] = '<svg width="'
    assert arr[1] = w_literal
    assert arr[2] = '" height="'
    assert arr[3] = h_literal
    assert arr[4] = '" xmlns="http://www.w3.org/'
    assert arr[5] = '2000/svg">'

    return ( Str(6, arr) )
end

func str_from_svg_circle {range_check_ptr} (svg_circle : SvgCircle) -> (str : Str):
    alloc_locals

    # Format:
    # <circle cx="<cx>" cy="<cy>" r="<r>" attribute_0="<attribute_0>" ... />

    let (cx_rounded, _) = unsigned_div_rem (svg_circle.cx.val, 100)
    let (cy_rounded, _) = unsigned_div_rem (svg_circle.cy.val, 100)
    let (r_rounded, _)  =  unsigned_div_rem (svg_circle.r.val, 100)

    let (cx_literal) = literal_from_number (cx_rounded)
    let (cy_literal) = literal_from_number (cy_rounded)
    let (r_literal)  = literal_from_number (r_rounded)

    let (arr) = alloc()
    assert arr[0] = '<circle cx="'
    assert arr[1] = cx_literal
    assert arr[2] = '" cy="'
    assert arr[3] = cy_literal
    assert arr[4] = '" r="'
    assert arr[5] = r_literal
    assert arr[6] = '" stroke="'
    assert arr[7] = svg_circle.stroke
    assert arr[8] = '" fill="'
    assert arr[9] = svg_circle.fill
    assert arr[10] = '" />'

    return ( Str(11, arr) )
end

#
# For testing purpose, generate a sweet lemoney circle in the center of a 300x300 canvas
#
func generate_one_circle_svg {range_check_ptr} () -> (svg_str : Str):
    alloc_locals

    # On a canvas of 300 x 300,
    # generate a lemoney circle at the center

    let (header_str : Str) = return_svg_header (300, 300)

    let (cx_fp2) = numfp2_from_felt (150)
    let (cy_fp2) = numfp2_from_felt (150)
    let (r_fp2)  = numfp2_from_felt (50)

    let svg_circle = SvgCircle (
        cx = cx_fp2,
        cy = cy_fp2,
        r =  r_fp2,
        stroke = '#3A3A3A',
        fill = '#FCFC99'
    )
    let (circle_str : Str) = str_from_svg_circle (svg_circle)

    let (close_str : Str) = str_from_literal ('</svg>')

    let (arr_str : Str*) = alloc()
    assert arr_str[0] = header_str
    assert arr_str[1] = circle_str
    assert arr_str[2] = close_str

    let (svg_str) = str_concat_array (3, arr_str)
    return (svg_str)
end